<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BPCSharedComponent</name>
    </assembly>
    <members>
        <member name="T:BPCSharedComponent.ExtendedAudio.AudioFile">
            <summary>
            Represents a wave file.
            </summary>
        </member>
        <member name="T:BPCSharedComponent.VectorCalculation.Degrees">
            <summary>
            Does clock mark calculations.
            </summary>
        </member>
        <member name="M:BPCSharedComponent.VectorCalculation.Degrees.getDegreeValue(System.Int32)">
            <summary>
            Scales down a degree value. For instance, if given 361, the method returns 1.
            </summary>
            <param name="dir">The degree value to adjust</param>
            <returns>The adjusted value.</returns>
        </member>
        <member name="M:BPCSharedComponent.VectorCalculation.Degrees.getDegreeValue(System.Single)">
            <summary>
            Scales down a degree value. For instance, if given 361, the method returns 1.
            </summary>
            <param name="dir">The degree value to adjust</param>
            <returns>The adjusted value.</returns>
        </member>
        <member name="M:BPCSharedComponent.VectorCalculation.Degrees.moveObject(System.Double@,System.Double@,System.Int32,System.Double,System.Double)">
            <summary>
            expects an object's coordinates and updates their values based on the information supplied
            </summary>
            <param name="X">The starting x coordinate of the object.</param>param>
            <param name="Y">The starting y coordinate of the object.</param>
            <param name="Dir">The naval direction of the object.</param>
            <param name="speed">The speed of the object.</param>
            <param name="timeElapsed">The amount of time elapsed between the time this method was last called.</param>
            <remarks>Assuming timeElapsed is measured in seconds, this method will return the coordinates after one second of travel; if timeElapsed==0.5, this method will return the coordinates after 1/2 seconds of travel, or after 500 milliseconds.
            Note: the unit time and time elapsed variables must match.
            For instance, if an object moved 5 miles/milliseconds, a value of 1 to the time elapsed variable will assume that 1 millisecond has passed between calls of this method.</remarks> 
        </member>
        <member name="M:BPCSharedComponent.VectorCalculation.Degrees.moveObject(System.Double@,System.Double@,System.Double@,System.Int32,BPCSharedComponent.VectorCalculation.Range,System.Double)">
             <summary>
            expects an object's coordinates and updates their values based on the information supplied by the Range structure.
             </summary>
             <param name="z">The starting Z coordinate of the object.</param>
             <param name="speed">A range structure describing the horizontal and vertical speed of the object.</param>
        </member>
        <member name="M:BPCSharedComponent.VectorCalculation.Degrees.toRadians(System.Int32)">
            <summary>
            Converts degree value to radians
            </summary>
            <param name="d">The degree value to convert</param>
            <returns>The degree value in radians</returns>
        </member>
        <member name="T:BPCSharedComponent.VectorCalculation.Degrees.Rotation">
            <summary>
            The following enumeration defines rotation direction.
            </summary>
        </member>
        <member name="M:BPCSharedComponent.ExtendedAudio.DSound.initialize(System.IntPtr,System.String)">
            <summary>
            Initializes DirectSound for playback.
            </summary>
            <param name="WinHandle">A pointer to the main form of this program.</param>
            <param name="root">The root directory of the sounds.</param>
        </member>
        <member name="M:BPCSharedComponent.ExtendedAudio.DSound.initialize(System.IntPtr,System.Boolean,System.String)">
            <summary>
            Assumes the sounds that will be loaded are encrypted.
            </summary>
            <param name="handle">The form handle.</param>
            <param name="m">True if sounds are encrypted, false otherwise.</param>
            <param name="root">The root directory of the sounds.</param>
        </member>
        <member name="M:BPCSharedComponent.ExtendedAudio.DSound.unloadSound(SharpDX.DirectSound.SecondarySoundBuffer@)">
            <summary>
            Unloads the sound from memory. The memory will be freed and the object reference will be set to NULL. The sound will also be stopped if it is playing.
            </summary>
            <param name="sound">The sound to unload.</param>
        </member>
        <member name="M:BPCSharedComponent.ExtendedAudio.DSound.isPlaying(SharpDX.DirectSound.SecondarySoundBuffer)">
            <summary>
             Checks to see if a sound is playing.
            </summary>
            <param name="s">The sound to check</param>
            <returns>True if the sound is playing, false if either s is NULL or is not playing.</returns>
        </member>
        <member name="M:BPCSharedComponent.ExtendedAudio.DSound.playAndWait(System.String)">
            <summary>
             Loads and plays the specified wave file, and disposes it after it is done playing.
            </summary>
            <param name="fn">The name of the file to play.</param>
        </member>
        <member name="M:BPCSharedComponent.ExtendedAudio.DSound.setRootDirectory(System.String)">
            <summary>
            Sets the root directory for sounds.
            </summary>
            <param name="root">The path of the root directory.</param>
        </member>
        <member name="P:BPCSharedComponent.ExtendedAudio.DSound.sizeOfBuffer">
            <summary>
            Gets the size of the Ogg Vorbis buffer.
            </summary>
        </member>
        <member name="P:BPCSharedComponent.ExtendedAudio.DSound.maxMusicVol">
            <summary>
            Gets the maximum volume of background music.
            </summary>
        </member>
        <member name="T:BPCSharedComponent.ExtendedAudio.DSound.BufferSize">
            <summary>
            Describes the size of a buffer in Ogg Vorbis playback.
            </summary>
        </member>
        <member name="T:BPCSharedComponent.Security.Encrypter">
            <summary>
            Encrypts and decrypts sounds.
            </summary>
        </member>
        <member name="T:BPCSharedComponent.ExtendedAudio.OggBuffer">
            <summary>
            Buffers and plays Ogg Vorbis data.
            </summary>
        </member>
        <member name="T:BPCSharedComponent.VectorCalculation.Range">
            <summary>
            Encapsulates a horizontal and vertical component--these can be used to define a locking range, or to obtain a component vector.
            </summary>
        </member>
        <member name="T:BPCSharedComponent.VectorCalculation.RelativePosition">
            <summary>
            Defines the position of an object relative to another.
            </summary>
        </member>
        <member name="M:BPCSharedComponent.VectorCalculation.RelativePosition.ToString">
            <summary>
            Returns a string representation of this structure. If this position structure will be spoken through SAPI, set sapiMode to true before calling this method.
            </summary>
            <returns>A string formatted for wave playback or to be read by SAPI.</returns>
        </member>
        <member name="M:BPCSharedComponent.VectorCalculation.RelativePosition.CompareTo(System.Object)">
            <summary>
            Sorts structures by distance. Both vertical and horizontal distances are accounted for.
            </summary>
            <param name="obj">The other RelativePosition object to compare with.</param>
            <returns>-1 if this structure is less than obj, 0 if they are equal, and 1 if obj is greater than this structure.</returns>
        </member>
        <member name="T:BPCSharedComponent.VectorCalculation.Velocity">
            <summary>
            Describes a velocity vector.
            </summary>
        </member>
    </members>
</doc>
